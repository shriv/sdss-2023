# Network analysis {#sec-network-analysis}

Network analysis is a powerful technique for geospatial problems. In particular, network metrics and routing stand out as a go-to approach for urban and transport applications. Analyses relying on network metrics connect back to real-world phenomena like mixed use at pedestrian scale and disconnected urbanism. For example, network centrality measures like closeness and betweenness centralities have been shown to correlate with mixed use at the pedestrian scale @simonsNetworkCentralityMeasures2021. Composite or novel network measures like the street network disconnectivity index (SNDi) have been show to correlated with new forms of disconnected urbanism (like gated communities) resulting in sprawl @barrington-leighGlobalTrendsUrban2020. 

However, network metrics don't focus on the citizen. Routing approaches addresses this disconnect. Routing intrinsically accounts for 2 of 5C's of walkability @londonplanningadvisorycommitteePuttingLondonBack1997: Connected and Convenient. Even the shortest path traversal of the relevant network can pick the best connected and convenient route.

A key advantage of network routing is that it can account for various aspects of real world routes through weighting. For example, steeper streets can be weighted to be less "comfortable" than flat ones. Depending on the available data, streets could also be weighted by their pedestrian infrastructure e.g. conspicuous footpaths and adequate lighting. 

## Tools, analysis and code
The walkability analyses in @sec-network-analysis and @sec-walkability were carried out in Python. They are described in detail in a series of blog posts (@raviWalkingWellington2020, @raviWalkingWellingtonWalkability2020, @raviWalkingWellingtonInsights2020, @raviWalkingWellingtonValidation2020) and in Jupyter notebooks on Github @shrivShrivAccessibilityseries2019. 

Key Python packages for the analyses are `osmnx` and `pandana`. `osmnx` not only facilitates data downloads from Openstreetmap but also converts streets to a network representation for network analysis / routing. `pandana` speeds up the many-to-many travel distance calculations to a matter of seconds. `pandana` is able to run many-to-many calculations of origin to nearest destination (and upto 10th nearest) - where every intersection node in the street network is the origin. 

Analyses in @sec-hilly-city and @sec-preference were carried out in R and relied on `osmdata`, `sf`, `sfnetworks` @LuukvdmeerSfnetworksTidy, `elevatr` @hollisterElevatr2023 and `slopes` @SlopesPackage2023. It's possible to convert the walkability analysis from Python to R but it's likely that `sfnetworks` will not be as performant as `pandana` for many-to-many routing at the scale of a city. `dodgr` @DodgrDistancesDirected2023 looks promising in this regard. One of the advantages of R (over Python) is the sophistication of packages for data visualisation and statistical modelling.  


## Converting distance to time
Distance is a good metric for planners as it is objective. However, citizens rarely think in this metric while walking. Travel times according to their own abilities is the rubric of choice. This can pose problems as people's sense of time can be subjective and highly variable. The best way to address the variability is by fitting distance to travel time functions to data collected from travel surveys or fitness apps @campbellUsingCrowdsourcedFitness2019 @goodchildToblerHikingFunction2020. Unfortunately, collecting the relevant data for the area in question and fitting the appropriate functions is a research project in its own right so the simplest and most well-known approach, Tobler's Hiking function @toblerThreePresentationsGeographical1993, has been used in this study. 



![Brunsdon's function is taken from @RPubsTobler39.](assets/toblers-fn.png){#fig-toblers-fn}


